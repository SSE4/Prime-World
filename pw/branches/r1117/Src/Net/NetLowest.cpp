#include "stdafx.h"
#include "NetLowest.h"

#pragma comment(lib, "wsock32.lib")
namespace NNet
{

int CNodeAddressSet::operator&( IBinSaver &f )
{
	f.Add( 2, &nPort );
	f.AddRawData( 3, ips, sizeof( ips ) );
	return 0;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CNodeAddressSet::CNodeAddressSet()
{
	Clear();
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CNodeAddressSet::Clear()
{
	Zero( *this );
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool CNodeAddressSet::IsZero() const
{
	//bool bAllIpsZero = true;
	for ( int i = 0; i < N_MAX_HOST_HOMES; ++i )
		if ( ips[i] )
			return false;
	return true;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool CNodeAddressSet::GetAddress( int n, CNodeAddress *pRes ) const
{
	pRes->Clear();
	if ( n < 0 || n >= N_MAX_HOST_HOMES || ips[n] == 0 )
		return false;
	sockaddr_in *p = (sockaddr_in*)pRes->GetSockAddr();
	p->sin_family = AF_INET;
	p->sin_port = htons( nPort );
	p->sin_addr.S_un.S_addr = ips[n];
	return true;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
WORD CNodeAddressSet::GetPort() const
{
	return nPort;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool CNodeAddressSet::SetAddress( int n, const CNodeAddress &addr )
{
	if ( n < 0 || n >= N_MAX_HOST_HOMES )
		return false;
	nPort = addr.GetPort();
	ips[n] = ((sockaddr_in *)addr.GetSockAddr())->sin_addr.S_un.S_addr;
	return true;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool CNodeAddressSet::operator==( const CNodeAddressSet &rhs ) const
{
	return nPort == rhs.nPort && !memcmp( ips, rhs.ips, sizeof( ips ) );
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
string CNodeAddress::GetIP() const
{
	const sockaddr_in &nameRemote = *(const sockaddr_in*)&addr;
	char szBuf[1024];
	const in_addr &ia = nameRemote.sin_addr;
	sprintf_s( szBuf, "%i.%i.%i.%i", 
		(int) ia.S_un.S_un_b.s_b1,
		(int) ia.S_un.S_un_b.s_b2,
		(int) ia.S_un.S_un_b.s_b3,
		(int) ia.S_un.S_un_b.s_b4 );
	return szBuf;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int CNodeAddress::GetPort() const
{
	const sockaddr_in &nameRemote = *(const sockaddr_in*)&addr;
	return (int) ntohs( nameRemote.sin_port );
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}
